# ===================== BOT.PY ===================== #
import asyncio
import aiohttp
import requests
import re
import logging
from aiogram import Bot, Dispatcher, Router, types, F

logging.basicConfig(level=logging.INFO)

TOKEN = ""
ADMIN_KEY = "ebubabulus"

# –∑–∞–≥—Ä—É–∂–∞–µ–º API base —Å GitHub
def get_api_base():
    try:
        resp = requests.get("https://raw.githubusercontent.com/kol49/rtkapi/main/url.json")
        if resp.status_code == 200:
            return resp.json().get("url", "")
    except Exception as e:
        print("‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API:", e)
    return ""

API_BASE = get_api_base()
print("‚úÖ API_BASE =", API_BASE)

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)
user_state = {}

session = None  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è aiohttp —Å–µ—Å—Å–∏—è, —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤ main()

def is_valid(txt):
    return re.fullmatch(r"[A-Za-z0-9]+", txt) is not None

@router.message(F.text == "/start")
async def start(msg: types.Message):
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ö—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ($1 ‚âà 40‚Ç¥)")]],
        resize_keyboard=True
    )
    await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è RTK-–ª–∞—É–Ω—á–µ—Ä–∞ –≤—Å–µ–≥–æ –∑–∞ $1 (‚âà40‚Ç¥)?", reply_markup=kb)


@router.message(F.text == "–ö—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ($1 ‚âà 40‚Ç¥)")
async def buy(msg: types.Message):
    user_state[msg.chat.id] = {"step": "set_username"}
    await msg.answer("‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ (–ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã):")


@router.message()
async def handle(msg: types.Message):
    global session
    state = user_state.get(msg.chat.id, {})
    step = state.get("step")

    text = msg.text.strip()

    # -------------------- –®–∞–≥ 1: –í–≤–æ–¥ –Ω–∏–∫–∞ --------------------
    if step == "set_username":
        if len(text) < 3 or not is_valid(text):
            await msg.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∏–∫
        try:
            r = await session.get(f"{API_BASE}/api/admin/users?admin_key={ADMIN_KEY}")
            data = await r.json()
            existing_users = data.get("users", [])
        except Exception as e:
            await msg.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∫–∞: {e}")
            return

        if text in existing_users:
            await msg.answer("‚ùå –≠—Ç–æ—Ç –Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return

        state["username"] = text
        state["step"] = "set_password"
        await msg.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã, –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")

    # -------------------- –®–∞–≥ 2: –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è --------------------
    elif step == "set_password":
        if len(text) < 6 or not is_valid(text):
            await msg.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
            return
        state["password"] = text
        state["step"] = "choose_payment"

        kb = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Monobank (40‚Ç¥)")],
                [types.KeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ YooMoney (100‚ÇΩ)")],
                [types.KeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ USDT (‚âà$1)")]
            ],
            resize_keyboard=True
        )
        await msg.answer("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

    # -------------------- –®–∞–≥ 3: –í—ã–±–æ—Ä Monobank --------------------
    elif step == "choose_payment" and "Monobank" in text:
        state["step"] = "set_card"
        await msg.answer("üí≥ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã:")

    elif step == "set_card":
        if not text.isdigit() or len(text) < 4:
            await msg.answer("‚ùå –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 4 —Ü–∏—Ñ—Ä—ã.")
            return
        state["payer_card"] = text[-4:]
        state["step"] = "waiting_payment"

        # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
        try:
            r = await session.post(f"{API_BASE}/api/create_order", json={
                "chat_id": msg.chat.id,
                "method": "monobank",
                "username": state["username"],
                "password": state["password"],
                "payer_card": state["payer_card"]
            })
            d = await r.json()
        except Exception as e:
            await msg.answer(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            return

        if not d.get("success"):
            await msg.answer("‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
            return

        order_id = d["order_id"]
        state["order_id"] = order_id

        kb = types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")]],
            resize_keyboard=True
        )
        await msg.answer(
            f"üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 40‚Ç¥ –Ω–∞ –∫–∞—Ä—Ç—É <b>4441111144245713</b>\n"
            f"–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ <code>order_id: {order_id}</code>\n\n"
            f"–í–ê–ñ–ù–û! –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞–Ω —Å –ø—Ä–∏–ø–∏—Å–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: order_id: xxxxxxxxxx\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=kb,
            parse_mode="HTML"
        )

    # -------------------- –®–∞–≥ 3: –í—ã–±–æ—Ä YooMoney --------------------
    elif step == "choose_payment" and "YooMoney" in text:
        state["method"] = "yoomoney"
        state["step"] = "waiting_yoomoney"

        try:
            r = await session.post(f"{API_BASE}/api/create_order", json={
                "chat_id": msg.chat.id,
                "method": "yoomoney",
                "username": state["username"],
                "password": state["password"],
                "payer_card": None
            })
            d = await r.json()
        except Exception as e:
            await msg.answer(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            return

        if not d.get("success"):
            await msg.answer("‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
            return

        order_id = d["order_id"]
        state["order_id"] = order_id

        kb = types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")]],
            resize_keyboard=True
        )
        YOOMONEY_WALLET = "4100119354176020"
        await msg.answer(
            f"üí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ 100‚ÇΩ –Ω–∞ –∫–æ—à–µ–ª—ë–∫ <code>{YOOMONEY_WALLET}</code>\n"
            f"–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ <code>order_id: {order_id}</code>\n\n"
            f"–í–ê–ñ–ù–û! –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞–Ω —Å –ø—Ä–∏–ø–∏—Å–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: order_id: xxxxxxxxxx\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=kb,
            parse_mode="HTML"
        )
        # -------------------- –®–∞–≥ 3: –í—ã–±–æ—Ä USDT --------------------
    elif step == "choose_payment" and "USDT" in text:
        state["method"] = "usdt"
        state["step"] = "waiting_usdt"

        try:
            r = await session.post(f"{API_BASE}/api/create_order", json={
                "chat_id": msg.chat.id,
                "method": "usdt",
                "username": state["username"],
                "password": state["password"],
                "payer_card": None
            })
            d = await r.json()
        except Exception as e:
            await msg.answer(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            return

        if not d.get("success"):
            await msg.answer("‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
            return

        order_id = d["order_id"]
        state["order_id"] = order_id

        USDT_WALLET = "TGcFLyXRperjx1GTS1yTw75xYsP7bN8cay"  # üëà —Ç–≤–æ–π TRC20-–∫–æ—à–µ–ª—ë–∫

        kb = types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")]],
            resize_keyboard=True
        )
        await msg.answer(
            f"üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>1 USDT (TRC20)</b> –Ω–∞ –∞–¥—Ä–µ—Å:\n"
            f"<code>{USDT_WALLET}</code>\n\n"
            f"‚ö† –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É (Memo) —É–∫–∞–∂–∏—Ç–µ:\n"
            f"<code>order_id: {order_id}</code>\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=kb,
            parse_mode="HTML"
        )

    # -------------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã Monobank --------------------
    elif step == "waiting_payment" and "–æ–ø–ª–∞—Ç–∏–ª" in text.lower():
        try:
            r = await session.get(f"{API_BASE}/api/check_orders")
            data = await r.json()
        except Exception as e:
            await msg.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: {e}")
            return

        found = False
        for o in data.get("orders", []):
            if str(o.get("order_id")) == str(state.get("order_id")) and o.get("status") == "paid":
                resp = await session.post(f"{API_BASE}/api/register", json={
                    "username": state["username"],
                    "password": state["password"],
                    "admin_key": ADMIN_KEY
                })
                d = await resp.json()
                if d.get("success"):
                    await msg.answer(
                        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ê–∫–∫–∞—É–Ω—Ç `{state['username']}` –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
                        parse_mode="Markdown"
                    )
                    user_state.pop(msg.chat.id, None)
                    found = True
                else:
                    await msg.answer("‚ö† –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
                break

        if not found:
            await msg.answer("‚è≥ –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")

    # -------------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã YooMoney --------------------
    elif step == "waiting_yoomoney" and "–æ–ø–ª–∞—Ç–∏–ª" in text.lower():
        try:
            r = await session.get(f"{API_BASE}/api/check_yoomoney")
            data = await r.json()
        except Exception as e:
            await msg.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: {e}")
            return

        found = False
        for o in data.get("orders", []):
            if str(o.get("order_id")) == str(state.get("order_id")) and o.get("status") == "paid":
                resp = await session.post(f"{API_BASE}/api/register", json={
                    "username": state["username"],
                    "password": state["password"],
                    "admin_key": ADMIN_KEY
                })
                d = await resp.json()
                if d.get("success"):
                    await msg.answer(
                        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ê–∫–∫–∞—É–Ω—Ç `{state['username']}` –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
                        parse_mode="Markdown"
                    )
                    user_state.pop(msg.chat.id, None)
                    found = True
                else:
                    await msg.answer("‚ö† –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
                break

        if not found:
            await msg.answer("‚è≥ –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
 # -------------------- –®–∞–≥ 3: –í—ã–±–æ—Ä USDT --------------------
    elif step == "choose_payment" and "USDT" in text:
        state["method"] = "usdt"
        state["step"] = "waiting_usdt"

        try:
            r = await session.post(f"{API_BASE}/api/create_order", json={
                "chat_id": msg.chat.id,
                "method": "usdt",
                "username": state["username"],
                "password": state["password"],
                "payer_card": None
            })
            d = await r.json()
        except Exception as e:
            await msg.answer(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            return

        if not d.get("success"):
            await msg.answer("‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
            return

        order_id = d["order_id"]
        state["order_id"] = order_id

        USDT_WALLET = "TDW1mRqz8zwo12345abcdEfghijkLmnoPQ"  # üëà —Ç–≤–æ–π TRC20-–∫–æ—à–µ–ª—ë–∫

        kb = types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")]],
            resize_keyboard=True
        )
        await msg.answer(
            f"üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>1 USDT (TRC20)</b> –Ω–∞ –∞–¥—Ä–µ—Å:\n"
            f"<code>{USDT_WALLET}</code>\n\n"
            f"‚ö† –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É (Memo) —É–∫–∞–∂–∏—Ç–µ:\n"
            f"<code>order_id: {order_id}</code>\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=kb,
            parse_mode="HTML"
        )
   # -------------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã USDT --------------------
    elif step == "waiting_usdt" and "–æ–ø–ª–∞—Ç–∏–ª" in text.lower():
        try:
            r = await session.get(f"{API_BASE}/api/check_usdt")
            data = await r.json()
        except Exception as e:
            await msg.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: {e}")
            return

        found = False
        for o in data.get("orders", []):
            if str(o.get("order_id")) == str(state.get("order_id")) and o.get("status") == "paid":
                resp = await session.post(f"{API_BASE}/api/register", json={
                    "username": state["username"],
                    "password": state["password"],
                    "admin_key": ADMIN_KEY
                })
                d = await resp.json()
                if d.get("success"):
                    await msg.answer(
                        f"‚úÖ –û–ø–ª–∞—Ç–∞ USDT –ø–æ–ª—É—á–µ–Ω–∞! –ê–∫–∫–∞—É–Ω—Ç `{state['username']}` –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
                        parse_mode="Markdown"
                    )
                    user_state.pop(msg.chat.id, None)
                    found = True
                else:
                    await msg.answer("‚ö† –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
                break

        if not found:
            await msg.answer("‚è≥ –ü–ª–∞—Ç—ë–∂ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")


async def main():
    global session
    session = aiohttp.ClientSession()  # —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –≤–Ω—É—Ç—Ä–∏ async
    try:
        await dp.start_polling(bot)
    finally:
        await session.close()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏


if __name__ == "__main__":
    asyncio.run(main())
